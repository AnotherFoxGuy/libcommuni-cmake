#!/bin/sh



#
# Defaults
#

OPTION_STATIC=no
OPTION_QMAKE=`which qmake || which qmake-qt4` 2>/dev/null

OPTION_MAKE_PLUGINS=yes
OPTION_MAKE_EXAMPLES=yes
OPTION_MAKE_TESTS=yes

QMAKE_ARGS=
QMAKE_CONF=
PRO_FILE=`dirname $0`/communi.pro



#
# Functions
#

help()
{
cat << END
Usage: $0 [OPTION]...

Configure options:

    -static .................. Build static library
    -qmake ................... qmake to use
    -config (config) ......... Additional configuration options recognized by qmake
    -make (part) ............. Add part to the list of parts to be built at
                               make time (available parts: plugins examples tests)
    -nomake (part) ........... Exclude part from the list of parts to be built

END
}

error()
{
    echo "Error: $@"
    exit 1
}

parse_make_part()
{
    case "$1" in
        plugins)    OPTION_MAKE_PLUGINS="$2";;
        examples)   OPTION_MAKE_EXAMPLES="$2";;
        tests)      OPTION_MAKE_TESTS="$2";;
        *)          error "Unknown make part: $1";;
    esac
}

add_qmake_config_arg()
{
    case "$1" in
        yes)    QMAKE_CONF="$QMAKE_CONF $2"
                QMAKE_ARGS="$QMAKE_ARGS -config $2";;
        no)     QMAKE_CONF="$QMAKE_CONF $3"
                QMAKE_ARGS="$QMAKE_ARGS -config $3";;
        auto)   ;; # Do nothing
        *)      error "Invalid value";;
    esac
}



#
# Parse arguments
#

while [ $# -gt 0 ] ; do
    case "$1" in
        -static)        OPTION_STATIC="yes";;
        -qmake)         OPTION_QMAKE="$2"; shift;;
        -config)        QMAKE_CONF="$QMAKE_CONF $2"
                        QMAKE_ARGS="$QMAKE_ARGS -config $2";
                        shift;;

        -make)          parse_make_part "$2" "yes"; shift;;
        -nomake)        parse_make_part "$2" "no"; shift;;

        -help|-h)       help; exit;;
        *)              error "Unknown option: $1. Please see $0 -help.";;
    esac
    shift
done



#
# Static option
#
if [ "$OPTION_STATIC" = "yes" ]; then
    QMAKE_CONF="$QMAKE_CONF static"
    QMAKE_ARGS="$QMAKE_ARGS -config static"
fi



#
# Add qmake options
#
add_qmake_config_arg "$OPTION_MAKE_PLUGINS"  "plugins"  "no_plugins"
add_qmake_config_arg "$OPTION_MAKE_EXAMPLES" "examples" "no_examples"
add_qmake_config_arg "$OPTION_MAKE_TESTS"    "tests"    "no_tests"



#
# Run qmake
#
if [ ! -f "$OPTION_QMAKE" ]; then
    echo "ERROR: Unable to find qmake. Try $0 -qmake /path/to/qmake."
    exit 1
fi

echo "Running $OPTION_QMAKE"
$OPTION_QMAKE -r $QMAKE_ARGS $PRO_FILE



#
# Output summary
#
echo
echo "Communi build configuration:"
echo "Configuration ...................$QMAKE_CONF"
echo "Plugins ......................... $OPTION_MAKE_PLUGINS"
echo "Examples ........................ $OPTION_MAKE_EXAMPLES"
echo "Tests ........................... $OPTION_MAKE_TESTS"
echo
echo Communi is now configured for building. Just run \'make\'.
echo
